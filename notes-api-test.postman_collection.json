{
	"info": {
		"_postman_id": "c0ed657a-6e76-4d3c-b17b-4446548b694c",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27196929"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () =>{\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test('response Content-type header should have application/json value', () =>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"})\r",
							"\r",
							"pm.test('response Body should be an object', ()=>{\r",
							"\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', ()=>{\r",
							"    const responseJson= pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('catatan berhasil ditambahkan');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data shouldhave noteId property and not equal to empty', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals\r",
							"('');\r",
							"\r",
							"pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\r\n        \"Android\", \"web\"\r\n    ],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', ()=>\r",
							"{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Speciffied Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object'); \r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.have.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain note object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('note');\r",
							"   pm.expect(data.note).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('note object should contain correct value for id, tittle, body, and tags property', ()=>{\r",
							"     const responseJson = pm.response.json();\r",
							"\r",
							"     const { data: { note } } = responseJson;\r",
							"\r",
							"     const expectedId = pm.environment.get('noteId');\r",
							"     const expectedTitle = 'Catatan A';\r",
							"     const expectedTags = ['Android', 'web'];\r",
							"     const expectedBody = 'Isi dari catatan A';\r",
							"\r",
							"     pm.expect(note).to.have.ownProperty('id');\r",
							"     pm.expect(note.id).to.equals(expectedId)\r",
							"\r",
							"     pm.expect(note).to.have.ownProperty('title');\r",
							"     pm.expect(note.title).to.equals(expectedTitle)\r",
							"\r",
							"     pm.expect(note).to.have.ownProperty('tags');\r",
							"     pm.expect(note.tags).to.eql(expectedTags)\r",
							"\r",
							"     pm.expect(note).to.have.ownProperty('body');\r",
							"     pm.expect(note.body).to.equals(expectedBody)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\r\n        \"android\",\r\n        \"web\"\r\n    ],\r\n    \"body\": \"Catatan A revisi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/eNlXEgRk32wtqGaA",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"eNlXEgRk32wtqGaA"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deleted Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response COntent-Type should have application/json value', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test('when request the deleted note', ()=>{\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response)=>{\r",
							"        if(!error){\r",
							"            pm.test('the deleted note should be ot found', ()=>{\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}